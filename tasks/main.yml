---
# environment:
#   RAILS_ENV:  "{{ rails_env }}"
#   PATH:       "{{ bundler_path }}:{{ ansible_env.PATH }}"

  # TODO: move to ruby role
- name: put rubygems on path
  template:
    src: "rubygems.sh.j2"
    dest: "/etc/profile.d/rubygems.sh"
  become: true

  # TODO: review: not at all sure these are having any effect, at least on CentOS
- name: set environment variables
  become: true
  lineinfile:
    dest: /etc/environment
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
    - regexp: "^RAILS_ENV="
      line:    "RAILS_ENV={{ rails_env }}"
    - regexp: "^PATH=*"
      line:    "PATH={{ bundler_path }}:{{ gems_path }}:{{ ansible_env.PATH }}"

- name: install os-specific prereqs
  include: "{{ansible_os_family}}_prereqs.yml"
  become: true

- name: install rails
  gem:
    name: rails
    version: "{{ rails_version }}"
    state: present
    # user_install: no

- name: clear out sufia build dir for redeployment
  file:
    path: "{{ sufia_build_dir }}"
    state: absent
  when: sufia_redeploy

    # TODO: this will become rrecommended practice with sufia version 7.3
# - name: create rails app from template
#   command: bash -lc "rails new {{ sufia_app_name }} -m {{ sufia_template }}"
#   args:
#     chdir: "{{ sufia_base_build_dir }}"

- name: create rails app
  command: bash -lc "rails new {{ sufia_app_name }}"
  args:
    chdir: "{{ sufia_base_build_dir }}"

# - name: add sufia to the new app's gemfile
#   lineinfile:
#     dest:   "{{ sufia_build_dir }}/Gemfile"
#     regexp: "^gem 'sufia', '{{ sufia_version }}'"
#     line:   "gem 'sufia', '{{ sufia_version }}'"

  # NOTE: presumably not needed with sufia versions >= 7.3
- name: add sufia and dependencies to new app's Gemfile
  blockinfile:
    dest: "{{ sufia_build_dir }}/Gemfile"
    block: |
      # Sufia Gems
      gem 'sufia', '{{ sufia_version }}'
      gem 'curation_concerns', '~> 1.6.0'
      gem 'flipflop', git: 'https://github.com/jcoyne/flipflop.git', branch: 'hydra'

  # TODO: this is the better approach, get it to work
# - name: inotify watcher fix
#   template:
#     src: sysctl.conf.j2
#     dest: /etc/sysctl.d/101-sysctl.conf
#   become: true
  # TODO: fragile. override in sysctl.d instead
- name: inotify watcher fix
  lineinfile:
    dest:   /etc/sysctl.conf
    regexp: "^fs.inotify.max_user_watches="
    line:   "fs.inotify.max_user_watches={{ sufia_inotify_watchers }}"
  become: true

- name: get inotify watchers
  command: "cat /proc/sys/fs/inotify/max_user_watches"
  register: inotify_watchers_result
  changed_when: false

  # NOTE: consider not forcing fail here, as the error we are attempting to avoid may not stick around.
  # if it doesn't, we don't really care about inootify watchers
- name: test inotify watcher fix
  assert:
    that: "{{inotify_watchers_result.stdout}} == {{ sufia_inotify_watchers }}"
    msg: "inotify max_user_watches value: {{inotify_watchers_result.stdout}}; expected value: {{ sufia_inotify_watchers }}"

- name: install the project's gems for development
  bundler:
    chdir: "{{ sufia_build_dir }}"
    gem_path: "vendor/bundle"

- name: install sufia
  command: bash -lc "rails generate sufia:install -f"
  args:
    chdir: "{{ sufia_build_dir }}"

- name: generate primary work type
  command: bash -lc "rails generate sufia:work {{ sufia_work_type }}"
  args:
    chdir: "{{ sufia_build_dir }}"

- name: database migrations
  command: bash -lc "rake db:migrate"
  args:
    chdir: "{{ sufia_build_dir }}"

- name: stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat

- name: clear out sufia deploy dir for redeployment
  file:
    path: "{{ sufia_deploy_dir }}"
    state: absent
  become: true
  when: sufia_build_stat.stat.exists and sufia_redeploy

- name: deploy sufia
  command: "mv {{ sufia_build_dir }} {{ sufia_deploy_dir }}"
  become: true
  when: sufia_build_stat.stat.exists
