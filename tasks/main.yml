---
# environment:
#   RAILS_ENV:  "{{ rails_env }}"
#   PATH:       "{{ bundler_path }}:{{ ansible_env.PATH }}"

  # TODO: review: not at all sure these are having any effect, at least on CentOS
- name: set environment variables
  become: true
  lineinfile:
    dest: /etc/environment
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "present"
  with_items:
    - regexp: "^RAILS_ENV="
      line:    "RAILS_ENV={{ rails_env }}"
    - regexp: "^PATH=*"
      line:    "PATH={{ bundler_path }}:{{ gems_path }}:{{ ansible_env.PATH }}"

- name: install os-specific prereqs
  include: "{{ansible_os_family}}_prereqs.yml"
  become: true

- name: install rails
  gem:
    name: rails
    version: "{{ rails_version }}"
    state: present
    # user_install: no

  # FIXME: parameterize to only install when needed
- name: install pg gem for working with postgres
  gem:
    name: pg
    state: present

# TODO: refactor or block, so that all inotify tasks can be run only when / where necessary
# TODO: this is the better approach, get it to work
# - name: inotify watcher fix
#   template:
#     src: sysctl.conf.j2
#     dest: /etc/sysctl.d/40-max_user_watches.conf
#   become: true
# TODO: fragile. override in sysctl.d instead
- name: inotify watcher fix
  lineinfile:
    dest:   /etc/sysctl.conf
    regexp: "^fs.inotify.max_user_watches="
    line:   "fs.inotify.max_user_watches={{ sufia_inotify_watchers }}"
  become: true

- name: apply inotify watcher fix
  command: "sysctl -p"
  become: true
  changed_when: false

- name: get inotify watchers
  command: "cat /proc/sys/fs/inotify/max_user_watches"
  register: inotify_watchers_result
  changed_when: false

# NOTE: consider not forcing fail here, as the error we are attempting to avoid may not stick around.
# if it doesn't, we don't really care about inootify watchers
- name: test inotify watcher fix
  assert:
    that: "{{inotify_watchers_result.stdout}} == {{ sufia_inotify_watchers }}"
    msg: "inotify max_user_watches value: {{inotify_watchers_result.stdout}}; expected value: {{ sufia_inotify_watchers }}"

  # TODO: consider assertion or flow control to prevent unproductive rebuild/redeploy settings on fresh system
- name: stat sufia deploy dir
  stat:
    path: "{{ sufia_deploy_dir }}"
  register: sufia_deploy_stat

  # build block
- block:
  - name: clear out sufia build dir for redeployment
    file:
      path: "{{ sufia_build_dir }}"
      state: absent

  # TODO: this will become recommended practice with sufia version 7.3
  # - name: create rails app from template
  #   command: bash -lc "rails new {{ sufia_app_name }} -m {{ sufia_template }}"
  #   args:
  #     chdir: "{{ sufia_base_build_dir }}"

    # FIXME: parameterixe postgres argument
  - name: create rails app
    command: bash -lc "rails new {{ sufia_app_name }} --database=postgresql"
    args:
      chdir: "{{ sufia_base_build_dir }}"

  # TODO: conditionally add dependencies based on sufia version
  # NOTE: presumably not needed with sufia versions >= 7.3
  - name: add sufia and dependencies to new app's Gemfile
    blockinfile:
      dest: "{{ sufia_build_dir }}/Gemfile"
      block: |
        gem 'sufia', '{{ sufia_version }}'
        gem 'curation_concerns', '~> 1.6.0'
        gem 'flipflop', git: 'https://github.com/jcoyne/flipflop.git', branch: 'hydra'
      marker: "# {mark} Sufia Gems"

  - name: install the project's gems
    bundler:
      chdir: "{{ sufia_build_dir }}"
      gem_path: "vendor/bundle"

  - name: install sufia
    command: bash -lc "rails generate sufia:install -f"
    args:
      chdir: "{{ sufia_build_dir }}"

  - name: generate primary work type
    command: bash -lc "rails generate sufia:work {{ sufia_work_type }}"
    args:
      chdir: "{{ sufia_build_dir }}"

    # TODO: review - only prod_like?
  - name: configure database
    include: configure_database.yml
    when: sufia_mode == "prod_like"

    # NOTE: this DESTRUCTIVE task is the sort of thing you'd need to use when
    # when developing, but sure isn't what you'd want to forget about and run
    # on a production system. it is necessitated by the fact that sufia's
    # database migrations are not idempotent. should they be?
    # IDK, but until they are, there's this
  - name: reset database !DESTRUCTIVELY!
    include: reset_database.yml
    when: sufia_breaking_stuff_is_ok and sufia_mode == "prod_like"

  - name: database migrations
    command: bash -lc "rake db:migrate"
    args:
      chdir: "{{ sufia_build_dir }}"

  when: sufia_rebuild
  # end build block

- name: stat sufia build dir
  stat:
    path: "{{ sufia_build_dir }}"
  register: sufia_build_stat

  # deploy block
- block:
    # TODO: specify uid and add app group with specific gid, for project_code use
  - name: add app user
    user:
      name: "{{ sufia_app_user }}"
      shell: "/bin/bash"

  - name: remove existing deploy directory, if redeploying
    file:
      path: "{{ sufia_deploy_dir }}"
      state: absent
    when: sufia_redeploy

  - name: add args to handle redeployment
    set_fact:
      created_deploy_dir: "/nonexistent/path/to/subvert/creates/argument"
  - set_fact:
      created_deploy_dir: "{{ sufia_deploy_dir }}"
    when: not sufia_redeploy

  - name: deploy sufia
    command: mv {{ sufia_build_dir }} {{ sufia_deploy_dir }}
    args:
      creates: "{{ created_deploy_dir }}"
    when: sufia_redeploy or not sufia_deploy_stat.stat.exists

  - name: configure bundle install based on sufia_mode
    set_fact:
      sufia_deployment_mode: false
  - set_fact:
      sufia_deployment_mode: true
    when: sufia_mode == "prod_like"

  - name: install the project's gems for deployment
    bundler:
      chdir: "{{ sufia_deploy_dir }}"
      gem_path: "vendor/bundle"
      deployment_mode: "{{ sufia_deployment_mode }}"

  - name: reassign ownership of deployed application
    file:
      path:     "{{ sufia_deploy_dir }}"
      owner:    "{{ sufia_app_user }}"
      group:    "{{ sufia_app_user }}"
      state:    directory
      recurse:  true

  # NOTE: can't deploy w/o something built
  # TODO: consider reflow to avoid illogical conditions
  when: sufia_build_stat.stat.exists
  become: true
  # end deploy block

  # FIXME: this is not a good solution. issue may be that the deploy dir is mounted.
  # may need to provide secontext as mount option.
  # see: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security-Enhanced_Linux-Working_with_SELinux-Mounting_File_Systems.html
- name: disable SELinux
  become: true
  selinux:
    state: disabled
# - name: set SELinux context on deploy dir
#   sefcontext:
#     target: "{{ sufia_deploy_dir }}(/.*)?"
#     setype: "httpd_sys_content_t"
#     reload: True
#     state:  present
#   become: true
#   register: sufia_se_context
#
# - name: fix the SELinux Context for deploy dir
#   shell: "restorecon -R -v {{ sufia_deploy_dir }}"
#   become: true
#   when: sufia_se_context.changed

- name: generate rails secret_key_base
  # command: bash -lc "bundle exec rake secret"
  command: "openssl rand -hex 64"
  register: secret_key_base
- lineinfile:
    dest: "/home/{{ app_user }}/.bashrc"
    regexp: "^export SECRET_KEY_BASE="
    line: "export SECRET_KEY_BASE={{ secret_key_base.stdout }}"
    state: "present"
  become: true

- name: start servers
  shell: screen -dm bash -c "bundle exec rake hydra:server >& log/sufia.log"
  args:
    chdir: "{{ sufia_deploy_dir }}"
  async: 30
  poll: 0
  when: sufia_mode == "dev"

- name: configure solr server
  include: configure_solr.yml
  when: sufia_mode == "prod_like"
